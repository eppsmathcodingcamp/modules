---
title: "Getting Started with R and RStudio"
subtitle: "A Beginner's Guide to Setting Up Your Data Science Environment"
author: "Shreyas Meher"
date: "August 12, 2024"
format: 
  html:
    toc: true
    toc-depth: 3
    code-fold: show
    code-tools: true
    highlight-style: github
---

## 1. Introduction

Welcome to the world of data science! This guide will walk you through the process of setting up your data science environment using R and RStudio. By the end of this tutorial, you'll have a fully functional setup ready for your data science journey.

## 2. Installing R

R is the programming language we'll be using for data analysis. Let's start by installing it on your system.

### For Windows:

1. Go to the [R Project website](https://cran.r-project.org/).
2. Click on "Download R for Windows".
3. Click on "base".
4. Click on the download link for the latest version of R.
5. Once downloaded, run the installer and follow the prompts.

### For Mac:

1. Go to the [R Project website](https://cran.r-project.org/).
2. Click on "Download R for macOS".
3. Click on the `.pkg` file appropriate for your macOS version.
4. Once downloaded, open the `.pkg` file and follow the installation instructions.

::: {.callout-important}
**Exercise 1:** After installation, type `R.version`. What version of R did you install? What is the nickname of that particular software build? 
:::

## 3. Installing RStudio

RStudio is an Integrated Development Environment (IDE) that makes working with R much easier and more efficient.

::: {.callout-tip}
An integrated development environment (IDE) is a software application that helps programmers develop software code more efficiently. IDEs combine capabilities like software editing, building, testing, and packaging into a single, easy-to-use application. When choosing an IDE, you can consider things like cost, supported languages, and extensibility. For example, if you're currently a Python developer but might start learning Ruby in the future, you might want to find an IDE that supports both languages.
:::

### For both Windows and Mac:

1. Go to the [RStudio download page](https://www.rstudio.com/products/rstudio/download/).
2. Under the "RStudio Desktop" section, click on "Download".
3. Select the appropriate installer for your operating system.
4. Once downloaded, run the installer and follow the prompts.

::: {.callout-important}
**Exercise 2:** Open RStudio. In the console pane (usually at the bottom-left), type `1 + 1` and press Enter. What result do you get?
:::

## 4. Configuring RStudio

Let's set up some basic configurations in RStudio to enhance your workflow.

1. In RStudio, go to Tools > Global Options.
2. Under the "General" tab:
   - Uncheck "Restore .RData into workspace at startup"
   - Set "Save workspace to .RData on exit" to "Never"
3. Under the "Code" tab:
   - Check "Soft-wrap R source files"
4. Click "Apply" and then "OK".

::: {.callout-important}
**Exercise 3:** Create a new R script (File > New File > R Script). Type `print("Hello, Data Science!")` and run the code. What output do you see in the console?
:::


## 5. Installing a Package Manager (pacman)

::: {.callout-tip}
In R, a package is a collection of R functions, data, and compiled code that's organized in a standard format.
:::

Pacman is a convenient package manager for R. Let's install it and learn how to use it.

In the RStudio console, type:

```{r}
#| eval: false
install.packages("pacman")
```

Once installed, you can load pacman and use it to install and load other packages:

```{r}
#| eval: false
library(pacman)
p_load(dplyr, ggplot2)
```

This installs (if necessary) and loads the dplyr and ggplot2 packages.


::: {.callout-important}
**Exercise 4:** Use pacman to install and load the tidyr package. Then, use p_functions() to list all functions in the tidyr package.
:::

## 6. Setting Up Your Working Directory

Setting up a proper working directory is crucial for organizing your projects.

For Windows:

- In RStudio, go to Session > Set Working Directory > Choose Directory

For Mac:

- In RStudio, go to Session > Set Working Directory > Choose Directory

### Alternatively, you can set the working directory using code:

```{r}
#| eval: false
setwd("/path/to/your/directory")
```

::: {.callout-important}
**Exercise 5:** Create a new folder on your computer called "DataScience". Set this as your working directory in RStudio. Then, use getwd() to confirm it's set correctly.
:::

## 7. Essential R Commands and Packages

Let's familiarize ourselves with some essential R commands and set up the main packages you'll need for data science work.

### Basic R Commands


```{r}
#| eval: false
# Creating variables
x <- 5
y <- 10

# Basic arithmetic
z <- x + y

# Creating vectors
numbers <- c(1, 2, 3, 4, 5)
names <- c("Alice", "Bob", "Charlie")

# Creating a data frame
df <- data.frame(
  name = names,
  age = c(25, 30, 35)
)

# Viewing data
View(df)
head(df)
str(df)
summary(df)

# Indexing
numbers[2]  # Second element
df$name     # Name column

# Basic functions
mean(numbers)
sum(numbers)
length(numbers)

# Logical operators
x > y
x == y
x != y

# Control structures
if (x > y) {
  print("x is greater than y")
} else {
  print("x is not greater than y")
}

# Loops
for (i in 1:5) {
  print(i^2)
}

# Creating a function
square <- function(x) {
  return(x^2)
}
square(4)

# Getting help
?mean
```



## 8. Installing and Loading Essential Packages

Let's install and load some of the most commonly used packages in data science:

```{r}
#| eval: false

# Install and load essential packages
p_load(
  tidyverse,   # a collection of packages for data science, including ggplot2, dplyr, tidyr, readr, and more
  readxl,      # for reading Excel files
  lubridate,   # for working with dates (technically part of tidyverse, but not loaded automatically)
  haven,       # for reading and writing data from SPSS, Stata, and SAS
  survey,      # for complex survey analysis
  lme4,        # for linear and generalized linear mixed models
  stargazer,   # for creating well-formatted regression tables and summary statistics
  RColorBrewer,# for creating color palettes
  rmarkdown,   # for creating dynamic documents
  shiny,       # for building interactive web apps
  plotly,      # for creating interactive plots
  knitr        # for dynamic report generation
)
```

::: {.callout-tip}
### Explore the Power of the `tidyverse`!

The `tidyverse` is a collection of R packages that are designed for data science. These packages share an underlying design philosophy, grammar, and data structures, making it easier to learn and apply them together. Here's why you should consider exploring the `tidyverse`:

- **Core Packages Included:**
  - `ggplot2`: Create stunning and customizable visualizations.
  - `dplyr`: Efficiently manipulate and transform data frames with intuitive syntax.
  - `tidyr`: Tidy your data into a format thatâ€™s easy to work with and visualize.
  - `readr`: Fast and friendly tools for reading rectangular data like CSV files.
  - `purrr`: Functional programming tools to iterate over elements and apply functions consistently.
  - `tibble`: Enhanced data frames with better printing and subsetting capabilities.
  - `stringr`: Simplified string operations for manipulating text data.
  - `forcats`: Tools for handling categorical data or factors.

- **Consistent Grammar:**
  - The `tidyverse` packages follow a consistent grammar (e.g., using verbs like `select`, `filter`, `mutate` in `dplyr`), making it easier to learn and apply different packages together.
  
- **Interoperability:**
  - These packages are designed to work seamlessly together, reducing the complexity of data analysis workflows. For example, you can use `dplyr` to manipulate data and `ggplot2` to visualize it in a single, coherent workflow.

- **Community and Resources:**
  - The `tidyverse` is widely adopted, meaning there's a rich community, extensive documentation, and numerous tutorials available to help you master these tools.

- **Improved Efficiency:**
  - Using the `tidyverse` can make your code more readable, concise, and faster to write, allowing you to focus more on analysis and less on code mechanics.

By incorporating the `tidyverse` into your R programming toolkit, you'll streamline your data science journey and be able to tackle complex tasks with greater ease and efficiency. Happy coding!
:::


## 9. Reading and Writing Data
Learning to read and write data is crucial for any data science project:

```{r}
#| eval: false
# Creating employee data
employee_data <- data.frame(
  EmployeeID = c(101, 102, 103, 104, 105),
  Name = c("John Doe", "Jane Smith", "Jim Brown", "Jake White", "Jill Black"),
  Department = c("HR", "Finance", "IT", "Marketing", "Sales"),
  Salary = c(60000, 65000, 70000, 55000, 72000),
  HireDate = as.Date(c("2015-03-15", "2016-07-20", "2017-05-22", "2018-11-12", "2019-09-30"))
)

# Writing data to CSV
write.csv(employee_data, "employee_data.csv", row.names = FALSE)

# Reading data from CSV
read_data <- read.csv("employee_data.csv")

# Writing data to Excel (requires writexl package)
p_load(writexl)
write_xlsx(employee_data, "employee_data.xlsx")

# Reading data from Excel
excel_data <- read_excel("employee_data.xlsx")

# Writing R objects to RDS (R's native format)
saveRDS(employee_data, "employee_data.rds")

# Reading RDS files
rds_data <- readRDS("employee_data.rds")
```


::: {.callout-important}
**Exercise 6:** Create a vector of 5 numbers and a vector of 5 names. Combine them into a data frame where each number corresponds to an age and each name corresponds to a person. Then, calculate the mean age and display a summary of the data frame.
::: 


::: {.callout-important}
**Advanced Exercise:** Create a custom function that takes a vector of numbers as input and returns a list containing the following:
1. The square of each number in the vector.
2. A count of how many numbers in the vector are greater than a specified threshold.
3. The mean of the numbers in the vector, but only include numbers greater than a specified threshold in the calculation.

Test your function with a vector of random numbers, using a threshold of your choice.

**Hint:** 

- **Squaring Numbers:** Remember that you can square all elements in a vector at once using vectorization (e.g., `numbers^2`). There's no need to loop through each element individually, though you can if you want to practice using loops.

- **Counting Elements:** To count how many numbers are greater than the threshold, use a logical comparison (e.g., `numbers > threshold`). This will return a logical vector (`TRUE` or `FALSE`), and you can sum it up with the `sum()` function, since `TRUE` is treated as 1 in R.

- **Filtering for Mean Calculation:** Use the logical comparison to filter your vector before calculating the mean (e.g., `numbers[numbers > threshold]`).
::: 

## 10. Next Steps

Now that you have a solid foundation in R and have set up your environment with essential packages, you're ready to start your data science journey! Here are some suggestions for next steps:

- Practice data manipulation with larger datasets
- Explore more advanced visualizations with ggplot2
- Learn about statistical tests and their implementation in R
- Start exploring machine learning with the caret package
- Create your first R Markdown document to share your analysis

Remember, the key to mastering R and data science is consistent practice and curiosity. Don't hesitate to explore the vast resources available online, including R documentation, tutorials, and community forums.

## 11. Conclusion

Congratulations! You've now set up your data science environment with R and RStudio, learned essential R commands, and gotten familiar with some of the most important packages in the R ecosystem. This foundation will serve you well as you continue your data science journey.
Keep practicing, stay curious, and happy data sciencing!


