---
title: "EPPS Math Coding Camp"
subtitle: "Basic Data Manipulation"
Instructor: "Xingyuan Zhao"
date: "August 12, 2024"
format: 
  html:
    toc: true
    toc-depth: 3
    code-fold: show
    code-tools: true
    highlight-style: github
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Session 1: Basic Data Manipulation

## 1.1.1 Slicing/Index

We learned access elements of matrix and vectors in the previous sessions. Indexing in Dataframes is similar. Remember, R uses 1-based indexing (the first element is at position 1, not 0).

### Examples:

A quick review of the DataFrame

```{r}
# Load data
  ev_data <- readxl::read_excel("Electric_Vehicle_Population_Data.xlsx")
head(ev_data)
```

Observe what is the return of the following codes:


```{r}

ev_data[1, 1]
ev_data[, 2]
ev_data[, c(2,3)]
ev_data[1, ]
ev_data[1:3, ]

```


Mind the type of the output. Observe what is the return of the following codes and see the difference:

```{r}
ev_data[[1, 1]]

class(ev_data[[1, 1]])
class(ev_data[1, 1])

```

What will happen if you run this line and why?

```{r}
# ev_data[[, 2]]
```

### Exercise:

- 1. Load the Electric Vehicle Population Data (Excel) on your machine
- 2. Return the Model_Year Columns using only indexing

::: {.callout-note collapse=true}
```{r}
ev_data[,6]
```
:::

## 1.1.2 Using Variable Names

```{r}

# Subsetting specific column
head(ev_data$Make)

# Subsetting specific columns
ev_data[, c("Make", "Model", "Electric_Range")]

```

### Exercise:

- Get the 10th row's 'City' Column value.

::: {.callout-note collapse=true}
```{r}
ev_data[10, 'City']
```
:::

## 1.1.3 Subsetting Data With condition

Subsetting is the process of extracting a portion of a dataset based on specific conditions. This can be useful for focusing on particular groups or conditions within your data.

### Detailed Explanation:

- **Row and Column Subsetting**: Use indexing to subset specific rows and columns.
- **Logical Conditions**: Subset based on logical conditions using operators like `==`, `!=`, `<`, `>`, `&`, `|`.

### Examples:

```{r}

# Subsetting rows based on a condition
ev_subset <- ev_data[ev_data$Model_Year == 2020, ]

# Subsetting rows and columns
ev_subset_cols <- ev_data[ev_data$Model_Year == 2020, c("Make", "Electric_Range")]

```

# Using logic operator to do complicated selection

```{r}

# Find new cars with high electric range
ev_data[ev_data$Model_Year > 2018 & ev_data$Electric_Range >= 100 , c("Make", "Model")]

# Find cars that is near me (Richardson is a city in Dallas and Collin counties)
ev_data[(ev_data$County == 'Collin' | ev_data$County == 'Dallas'), c("Make", "Model")]

# Find cars outside TX that are made by Tesla or is expensive
ev_data[ev_data$State != 'TX' & (ev_data$Make == 'TESLA' | ev_data$`Base MSRP` >= 10000), c("Make", "Model")]

```
<br>

- ev_data$Model_Year == 2020: Subsets rows where the year is 2020. <br>
- [, c("Make", "Model", "Electric_Range")]: Subsets specific columns by their names. <br>
<br>
Try subsetting the data using different conditions and explore the resulting subsets.
<br>


### Exercise:
- 1. I want a car that is cheap or is cheap to run. Find the vehicles that are in Texas but not in Richardson, if their Electric_Range is larger than 20 or the Base MSRP is lower than 10000. Return the Make, Model and Electric Vehicle Type. 

::: {.callout-note collapse=true}
```{r}
ev_data[(ev_data$State == 'TX'& ev_data$City != 'Richardson') & (ev_data$Electric_Range >= 200 | ev_data$`Base MSRP` <= 10000),c("Make", "Model", "Electric Vehicle Type")]
```
:::


## 1.2 Basic Data Transformation
Data transformation involves modifying data to fit a certain format or to prepare it for analysis. This includes operations like renaming columns, creating new variables, and changing data types.
<br>

#### Detailed Explanation:
- **Renaming Columns**: Use the names() function or dplyr::rename(). <br>
- **Creating New Variables**: Add new columns based on calculations or conditions. <br>
- **Changing Data Types**: Convert columns to appropriate data types using functions like as.numeric(), as.factor(), etc. <br>

```{r}
# Renaming columns
names(ev_data)[names(ev_data) == "Postal_Code"] <- "Zip_Code"

# Creating new variables
ev_data$Vehicle_Age <- 2025 - ev_data$Model_Year

# Changing data types
ev_data$Make <- as.factor(ev_data$Make)

summary(ev_data)
```
<br>
- **names()**: Retrieves or sets the names of an object's elements. <br>
- **as.factor()**: Converts a variable to factor<br>
<br>

### Exercise:

- Normalize the scores to a Electric_Range between 0 and 1 and store these in a new column named normalized_range.

hint: 

$$
\text{normalized\_value} = \frac{\text{value} - \min(\text{value})}{\max(\text{value}) - \min(\text{value})}
$$

::: {.callout-note collapse=true}
```{r}
class(ev_data$Electric_Range)
ev_data <- ev_data[!is.na(ev_data$Electric_Range),]
ev_data$normalized_range <- (ev_data$Electric_Range - min(ev_data$Electric_Range)) / (max(ev_data$Electric_Range) - min(ev_data$Electric_Range))
ev_data$normalized_range
```
:::

## 1.3 Missing Values

```{r}

# Count na of df
sum(is.na(ev_data))

# Count na of each col
colSums(is.na(ev_data))

# Indicates which elements are missing within a specific column
ev_data[is.na(ev_data$County ),]

# Indicates which elements are not missing within a specific column
ev_data[!is.na(ev_data$City ),]

# Removes missing values of a specific column by subsetting
ev_data <- ev_data[!is.na(ev_data$City),]

# Check na Removal
sum(is.na(ev_data))

# Removes ALL missing values in data frame
na.omit(ev_data)

# Check na Removal
sum(is.na(ev_data))

```

### Exercise:

- Omit the missing value in MSRP column and run the exercises again, tell me if there is any difference. 


## 1.4 Introduction to the dplyr Package
dplyr is a powerful package for data manipulation in R. It provides a set of functions (verbs) that help in transforming and summarizing data easily.
<br>

#### Key Verbs:
- **filter()**: Select rows based on conditions. <br>
- **select()**: Choose specific columns. <br>
- **mutate()**: Create new columns. <br>
- **arrange()**: Order rows by columns. <br>
- **summarize() and group_by()**: Aggregate data by groups. <br>
 
```{r}
# Loading dplyr
# install.packages("dplyr")
library(dplyr)

# Filtering data
ev_recent <- ev_data %>% filter(Model_Year >= 2018)


# Selecting columns
ev_selected <- ev_recent %>% select(Make, Model, Model_Year)
summary(ev_selected)


# Creating a new variable
ev_selected <- ev_selected %>% mutate(Age = 2025 - Model_Year)

# Arranging data
ev_sorted <- ev_selected %>% arrange(desc(Model_Year))
summary(ev_sorted)

# Summarizing data
ev_summary <- ev_data %>%
  group_by(Make) %>%
  summarize(Total_Electric_Range = sum(Electric_Range, na.rm = TRUE))
head(ev_summary)
```
<br>

- **%>% (pipe operator)**: Passes the result from the left-hand side to the function on the right-hand side. <br>
- **filter()**: Filters rows based on a logical condition. <br>
- **select()**: Selects specific columns. <br>
- **mutate()**: Adds new columns or transforms existing ones. <br>
- **arrange()**: Orders rows by specified columns. <br>
- **summarize() and group_by()**: Aggregates data by grouping variables. <br>

<br>
Utilize dplyr to perform complex data manipulations succinctly and efficiently.
<br>

# Session 2: Hands-on Exercises
## 2.1 Subsetting and Filtering Data
1) Subset the US_Life_expectancy data for a specific state and year.
2) Select only the columns "Year" and "Age_adjusted_Death_Rate" from US_Life_expectancy data.
<br>

::: {.callout-note collapse=true}
```{r}
# Your code here
life_data <- read.csv("US_Life_expectancy.csv")
life_gender_year <- life_data[life_data$Gender == "Gender" & life_data$Year == 2000, ]
life_make_model <- life_data[, c("Year", "Age_adjusted_Death_Rate")]
```
<br>
:::

## 2.2 Data Transformation
1) Rename a column in the US_Life_expectancy data. <br>
2) Create a new column in the Electric Vehicle data representing the vehicle's age. <br>

::: {.callout-note collapse=true}
```{r}
# Your code here
names(life_data)[names(life_data) == "Death_Rate"] <- "Age_adjusted_Death_Rate"
ev_data$Vehicle_Age <- 2025 - ev_data$Model_Year
```
<br>
:::

# Session 3: Wrapping Up and Q&A
In this session, we've covered essential data manipulation techniques, including subsetting, transforming data, and using the dplyr package. These skills are critical for preparing and analyzing data effectively.
<br>

Continue exploring different data manipulation techniques and apply them to various datasets to enhance your proficiency.
<br>

**Q&A**: Feel free to ask questions or share your experiences with data manipulation in R. Let's discuss any challenges or interesting findings from your exercises.
<br>


### Reference
- https://datageneration.io/dataprogrammingwithr/intro
- Chicago Harris School Coding Camp
- Data.gov, the U.S. government's open data portal

